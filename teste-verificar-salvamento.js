// Teste para verificar se os dados foram salvos no banco Dokploy
console.log('üîç VERIFICANDO SALVAMENTO NO BANCO DOKPLOY\n');

/**
 * Fun√ß√£o para testar se os dados foram salvos
 */
async function verificarSalvamento() {
    console.log('üìä Verificando dados salvos...');
    
    // 1. Verificar se h√° notifica√ß√µes de sucesso
    const notificacoes = document.querySelectorAll('.amk-spy-notification');
    if (notificacoes.length > 0) {
        console.log('‚úÖ Notifica√ß√µes encontradas:');
        notificacoes.forEach(notif => {
            console.log(`   üì¢ ${notif.textContent}`);
        });
    }
    
    // 2. Verificar localStorage para dados tempor√°rios
    const produtosLocal = localStorage.getItem('spy_amk_produtos');
    if (produtosLocal) {
        const produtos = JSON.parse(produtosLocal);
        console.log(`üì¶ ${produtos.length} produtos no localStorage`);
        
        // Mostrar √∫ltimos 3 produtos
        produtos.slice(-3).forEach(produto => {
            console.log(`   ‚Ä¢ ${produto.asin}: ${produto.titulo}`);
        });
    }
    
    // 3. Verificar se DokployManager est√° funcionando
    if (typeof window.dokployManager !== 'undefined') {
        console.log('‚úÖ DokployManager est√° ativo');
        console.log('üìä Configura√ß√µes:', window.dokployManager.getConfig());
        
        // Testar salvamento de um produto de exemplo
        const produtoTeste = {
            asin: 'B08TEST123',
            titulo: 'Produto de Teste',
            preco: 99.99,
            vendas: 1000,
            ranking: 50000,
            categoria: 'Electronics',
            marca: 'TestBrand'
        };
        
        try {
            const resultado = await window.dokployManager.salvarProduto(produtoTeste);
            console.log('‚úÖ Teste de salvamento:', resultado);
        } catch (error) {
            console.error('‚ùå Erro no teste de salvamento:', error);
        }
    }
    
    // 4. Verificar console logs de salvamento
    console.log('\nüîç Procure nos logs do console por mensagens como:');
    console.log('   ‚úÖ "Produto salvo no Supabase"');
    console.log('   ‚úÖ "produtos salvos no banco"');
    console.log('   ‚úÖ "An√°lise conclu√≠da"');
    
    // 5. Verificar se h√° produtos na tabela atual
    if (window.produtosTabela && window.produtosTabela.length > 0) {
        console.log(`üìã ${window.produtosTabela.length} produtos na tabela atual`);
        
        // Contar produtos com diferentes status
        const novos = window.produtosTabela.filter(p => p.status === 'novo').length;
        const existentes = window.produtosTabela.filter(p => p.status === 'existe').length;
        
        console.log(`   üÜï ${novos} produtos novos`);
        console.log(`   üìç ${existentes} produtos existentes`);
    }
    
    // 6. Instru√ß√µes para verificar no banco
    console.log('\nüí° PARA VERIFICAR NO BANCO DOKPLOY:');
    console.log('1. Acesse o Dokploy: https://dokploy.com');
    console.log('2. V√° para seu projeto "spy-amk"');
    console.log('3. Clique em "Database" ‚Üí "PostgreSQL"');
    console.log('4. Abra o terminal/console do banco');
    console.log('5. Execute: SELECT COUNT(*) FROM produtos;');
    console.log('6. Execute: SELECT * FROM produtos ORDER BY criado_em DESC LIMIT 10;');
    
    console.log('\nüîç COMANDOS SQL √öTEIS:');
    console.log('-- Ver total de produtos:');
    console.log('SELECT COUNT(*) FROM produtos;');
    console.log('');
    console.log('-- Ver √∫ltimos produtos salvos:');
    console.log('SELECT asin, titulo, preco, vendas, criado_em FROM produtos ORDER BY criado_em DESC LIMIT 10;');
    console.log('');
    console.log('-- Ver produtos por termo de pesquisa:');
    console.log("SELECT COUNT(*) FROM posicoes WHERE keyword LIKE '%stunt race%';");
    console.log('');
    console.log('-- Ver posi√ß√µes salvas hoje:');
    console.log("SELECT * FROM posicoes WHERE data_coleta >= CURRENT_DATE;");
}

/**
 * Fun√ß√£o para simular verifica√ß√£o de conectividade
 */
async function testarConectividade() {
    console.log('\nüåê TESTANDO CONECTIVIDADE COM DOKPLOY:');
    
    const config = {
        host: '152.53.192.161',
        port: 5432,
        database: 'spy-amk-db'
    };
    
    console.log('üìä Configura√ß√µes de conex√£o:');
    console.log(`   Host: ${config.host}`);
    console.log(`   Port: ${config.port}`);
    console.log(`   Database: ${config.database}`);
    
    // Simular teste de conectividade
    console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: Extens√£o n√£o pode conectar diretamente ao banco!');
    console.log('üí° Para salvar dados, precisamos de um backend intermedi√°rio.');
    console.log('');
    console.log('üîÑ STATUS ATUAL:');
    console.log('   ‚úÖ Dados s√£o extra√≠dos da Amazon');
    console.log('   ‚úÖ Dados s√£o processados pela extens√£o');
    console.log('   ‚ö†Ô∏è  Dados s√£o "simulados" como salvos');
    console.log('   ‚ùå Dados N√ÉO s√£o salvos no banco real');
    console.log('');
    console.log('üöÄ PARA SALVAR REALMENTE:');
    console.log('   1. Criar backend Node.js');
    console.log('   2. Fazer deploy do backend');
    console.log('   3. Extens√£o enviar dados para backend');
    console.log('   4. Backend salvar no Dokploy');
}

/**
 * Fun√ß√£o para mostrar pr√≥ximos passos
 */
function mostrarProximosPassos() {
    console.log('\nüéØ PR√ìXIMOS PASSOS PARA COMERCIALIZAR:');
    console.log('');
    console.log('1. üñ•Ô∏è  BACKEND:');
    console.log('   ‚Ä¢ Criar API Node.js/Express');
    console.log('   ‚Ä¢ Conectar ao banco Dokploy');
    console.log('   ‚Ä¢ Implementar autentica√ß√£o');
    console.log('   ‚Ä¢ Deploy no Vercel/Railway');
    console.log('');
    console.log('2. üîê AUTENTICA√á√ÉO:');
    console.log('   ‚Ä¢ Sistema de login');
    console.log('   ‚Ä¢ Planos (Free/Pro/Enterprise)');
    console.log('   ‚Ä¢ Limites por usu√°rio');
    console.log('');
    console.log('3. üí≥ MONETIZA√á√ÉO:');
    console.log('   ‚Ä¢ Integra√ß√£o com Stripe');
    console.log('   ‚Ä¢ Plano Free: 100 produtos/m√™s');
    console.log('   ‚Ä¢ Plano Pro: 5.000 produtos/m√™s');
    console.log('   ‚Ä¢ Plano Enterprise: Ilimitado');
    console.log('');
    console.log('4. üìä DASHBOARD:');
    console.log('   ‚Ä¢ Interface web para an√°lises');
    console.log('   ‚Ä¢ Gr√°ficos de tend√™ncias');
    console.log('   ‚Ä¢ Relat√≥rios export√°veis');
    console.log('');
    console.log('5. üì± DISTRIBUI√á√ÉO:');
    console.log('   ‚Ä¢ Chrome Web Store');
    console.log('   ‚Ä¢ Firefox Add-ons');
    console.log('   ‚Ä¢ Landing page');
    console.log('   ‚Ä¢ Documenta√ß√£o');
}

// Executar verifica√ß√£o automaticamente
verificarSalvamento();
testarConectividade();
mostrarProximosPassos();

// Disponibilizar fun√ß√µes globalmente
window.verificarSalvamento = verificarSalvamento;
window.testarConectividade = testarConectividade;
window.mostrarProximosPassos = mostrarProximosPassos; 