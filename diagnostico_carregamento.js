// Diagn√≥stico de carregamento dos componentes
console.log('üîç Diagn√≥stico de carregamento dos componentes...');

// Verificar se os componentes est√£o dispon√≠veis
console.log('\nüìã Status dos componentes:');
console.log('TableManager:', typeof TableManager !== 'undefined' ? '‚úÖ Carregado' : '‚ùå N√£o carregado');
console.log('ProductAnalyzer:', typeof ProductAnalyzer !== 'undefined' ? '‚úÖ Carregado' : '‚ùå N√£o carregado');
console.log('AppController:', typeof AppController !== 'undefined' ? '‚úÖ Carregado' : '‚ùå N√£o carregado');
console.log('NotificationManager:', typeof NotificationManager !== 'undefined' ? '‚úÖ Carregado' : '‚ùå N√£o carregado');
console.log('EventManager:', typeof EventManager !== 'undefined' ? '‚úÖ Carregado' : '‚ùå N√£o carregado');
console.log('ThemeManager:', typeof ThemeManager !== 'undefined' ? '‚úÖ Carregado' : '‚ùå N√£o carregado');

// Verificar se os arquivos foram carregados
console.log('\nüìÅ Verifica√ß√£o de arquivos carregados:');
const scripts = document.querySelectorAll('script[src*="spy-amk"]');
console.log('Scripts da extens√£o encontrados:', scripts.length);
scripts.forEach((script, index) => {
    console.log(`${index + 1}. ${script.src}`);
});

// Verificar se h√° erros no console
console.log('\nüö® Verifica√ß√£o de erros:');
if (window.onerror) {
    console.log('‚úÖ Handler de erro global configurado');
} else {
    console.log('‚ùå Handler de erro global n√£o configurado');
}

// Tentar carregar manualmente se necess√°rio
console.log('\nüîß Tentativa de carregamento manual:');
if (typeof TableManager === 'undefined') {
    console.log('‚ùå TableManager n√£o est√° dispon√≠vel');
    console.log('üí° Tentando carregar manualmente...');
    
    // Verificar se o arquivo existe
    const script = document.createElement('script');
    script.src = chrome.runtime.getURL('ui/table.js');
    script.onload = () => {
        console.log('‚úÖ ui/table.js carregado manualmente');
        console.log('TableManager agora:', typeof TableManager !== 'undefined' ? '‚úÖ Dispon√≠vel' : '‚ùå Ainda n√£o dispon√≠vel');
    };
    script.onerror = () => {
        console.log('‚ùå Erro ao carregar ui/table.js manualmente');
    };
    document.head.appendChild(script);
} else {
    console.log('‚úÖ TableManager j√° est√° dispon√≠vel');
}

// Verificar se h√° problemas de timing
console.log('\n‚è∞ Verifica√ß√£o de timing:');
console.log('Document ready state:', document.readyState);
console.log('URL atual:', window.location.href);
console.log('√â p√°gina de pesquisa:', window.location.href.includes('/s?') || window.location.href.includes('/s/'));

// Verificar se a extens√£o est√° ativa
console.log('\nüîå Status da extens√£o:');
if (typeof chrome !== 'undefined' && chrome.runtime) {
    console.log('‚úÖ Chrome extension API dispon√≠vel');
    console.log('Extension ID:', chrome.runtime.id);
} else {
    console.log('‚ùå Chrome extension API n√£o dispon√≠vel');
}

// Verificar se h√° conflitos
console.log('\n‚ö° Verifica√ß√£o de conflitos:');
const elementosConflitantes = document.querySelectorAll('[id*="amazon-analyzer"], [id*="amk-spy"]');
console.log('Elementos da extens√£o no DOM:', elementosConflitantes.length);

// Sugest√µes de corre√ß√£o
console.log('\nüí° Sugest√µes de corre√ß√£o:');
if (typeof TableManager === 'undefined') {
    console.log('1. Recarregue a extens√£o no Chrome (chrome://extensions/)');
    console.log('2. Verifique se todos os arquivos est√£o presentes');
    console.log('3. Verifique o console para erros de JavaScript');
    console.log('4. Tente recarregar a p√°gina da Amazon');
    console.log('5. Execute: AppController.init() manualmente');
} else {
    console.log('‚úÖ TableManager est√° funcionando corretamente');
}

console.log('\nüéØ Para testar manualmente:');
console.log('1. Execute: AppController.exibirAnalise()');
console.log('2. Execute: TableManager.criarTabelaProdutos([])');
console.log('3. Execute: teste_filtros_novos.js'); 